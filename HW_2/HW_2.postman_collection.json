{
	"info": {
		"_postman_id": "9633b0ab-559d-4b37-bfd1-13ff44294822",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Task_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "maryna.maksimenka",
							"type": "text"
						},
						{
							"key": "password",
							"value": "9336391mmc",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"minItems\": 3,\r",
							"                    \"maxItems\": 3,\r",
							"                    \"items\": [\r",
							"                        {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"integer\",\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"integer\"\r",
							"                        }\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"u_age\",\r",
							"                \"u_name\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"additionalProperties\": false\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"qa_salary_after_6_months\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"start_qa_salary\": {\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ],\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"JSON schema is valid\", function() {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3\r",
							"let requestData = JSON.parse(request.data);\r",
							"let salary = requestData.salary;\r",
							"let qa_salary_after_6_months = jsonData.qa_salary_after_6_months;\r",
							"let qa_salary_after_12_months = jsonData.qa_salary_after_12_months;\r",
							"let u_salary_1_5_year = jsonData.person.u_salary_1_5_year;\r",
							"\r",
							"pm.test(\"Multiplication by 2 is correct\", function() {\r",
							"    pm.expect(qa_salary_after_6_months).to.eql(salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"Multiplication by 2.9 is correct\", function() {\r",
							"    pm.expect(qa_salary_after_12_months).to.eql(salary * 2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"Multiplication by 4 is correct\", function() {\r",
							"    pm.expect(u_salary_1_5_year).to.eql(salary * 4);\r",
							"});\r",
							"\r",
							"// 4\r",
							"pm.environment.set(\"salary\", jsonData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": \"26\",\r\n    \"salary\": \"1000\",\r\n    \"name\": \"Marina\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"minItems\": 3,\r",
							"            \"maxItems\": 3,\r",
							"            \"items\": [\r",
							"                {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\",\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"JSON schema is valid\", function() {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3\r",
							"let requestData = request.data;\r",
							"let salary = parseInt(requestData.salary);\r",
							"\r",
							"pm.test(\"Result of multiplying by 1 is correct\", function() {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Result of multiplying by 2 is correct\", function() {\r",
							"    pm.expect(Number(jsonData.salary[1])).to.eql(salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"Result of multiplying by 3 is correct\", function() {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql(salary * 3);\r",
							"});\r",
							"\r",
							"// 4\r",
							"pm.test(\"The second array element is greater than the zero element\", function() {\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.be.greaterThan(parseInt(jsonData.salary[0]));\r",
							"});\r",
							"\r",
							"pm.test(\"The second array element is greater than the first element\", function() {\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.be.greaterThan(parseInt(jsonData.salary[1]));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Marina",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\"\r",
							"    ],\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"JSON schema is valid\", function() {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3\r",
							"let requestData = request.data;\r",
							"let weight = requestData.weight;\r",
							"let daily_food = jsonData.daily_food;\r",
							"let daily_sleep = jsonData.daily_sleep;\r",
							"\r",
							"pm.test(\"Result of multiplying by 0.012 is correct\", function() {\r",
							"    pm.expect(daily_food).to.eql(weight * 0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"Result of multiplying by 2.5 is correct\", function() {\r",
							"    pm.expect(daily_sleep).to.eql(weight * 2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "56",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Marina",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"minItems\": 2,\r",
							"                    \"maxItems\": 2,\r",
							"                    \"items\": [\r",
							"                        {\r",
							"                            \"type\": \"array\",\r",
							"                            \"minItems\": 2,\r",
							"                            \"maxItems\": 2,\r",
							"                            \"items\": [\r",
							"                                {\r",
							"                                    \"type\": \"string\"\r",
							"                                },\r",
							"                                {\r",
							"                                    \"type\": \"integer\"\r",
							"                                }\r",
							"                            ]\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"array\",\r",
							"                            \"minItems\": 2,\r",
							"                            \"maxItems\": 2,\r",
							"                            \"items\": [\r",
							"                                {\r",
							"                                    \"type\": \"string\"\r",
							"                                },\r",
							"                                {\r",
							"                                    \"type\": \"integer\"\r",
							"                                }\r",
							"                            ]\r",
							"                        }\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"children\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"additionalProperties\": false\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"family\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test('JSON schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"// 4\r",
							"let requestData = request.data;\r",
							"\r",
							"pm.test(\"Response property matches request property\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(requestData.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Marina",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let randomCurrency = jsonData[Math.floor(Math.random() * jsonData.length)];\r",
							"pm.environment.set(\"random_id\", randomCurrency.Cur_ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"Cur_Abbreviation\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"Cur_ID\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"Cur_Name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"Cur_OfficialRate\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"Cur_Scale\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"Date\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"Cur_Abbreviation\",\r",
							"        \"Cur_ID\",\r",
							"        \"Cur_Name\",\r",
							"        \"Cur_OfficialRate\",\r",
							"        \"Cur_Scale\",\r",
							"        \"Date\"\r",
							"    ],\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test('JSON schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "curr_code",
							"value": "{{random_id}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}